package vw.model {	import flash.events.*;	/**	 * @author Takashi Murai (vesperworks)	 */	 	public class Stepper extends EventDispatcher {		private var _page:int;		private var _pPage:int;		private var _min:int;		private var _max:int;		private var _isLoop:Boolean;		private var _history:Array = new Array();		private var historyMax:int = 10;		public static const CHANGE:String = "STEPPER_CHANGE";		public static const RELOAD:String = "STEPPER_RELOAD";		public static const MIN_LIMIT:String = "STEPPER_MIN_LIMIT";		public static const MAX_LIMIT:String = "STEPPER_MAX_LIMIT";		public static const NEXT:String = "STEPPER_NEXT";		public static const PREV:String = "STEPPER_PREV";		public function get history():Array {			return _history;		}		public function get isLoop():Boolean {			return _isLoop;		}		public function set isLoop(v:Boolean):void {			_isLoop = v;		}		public function get max():int {			return _max;		}		public function set max(v:int):void {			_max = v;		}		public function get min():int {			return _min;		}		public function set min(v:int):void {			_min = v;		}		public function get page():int {			return _page;		}		public function set page(v:int):void {			_pPage = _page;			_page = validate(v);			update();			if (_pPage < _page) {				dispatchEvent(new Event(NEXT));			}			if (_page < _pPage) {				dispatchEvent(new Event(PREV));			}		}		public function Stepper(nMin:int = 0, nMax:int = 1) {			min = nMin;			max = nMax;			_page = max;			isLoop = false;		}		public function init():void {			if (min == max) {				dispatchEvent(new Event(MIN_LIMIT));				dispatchEvent(new Event(MAX_LIMIT));			}			jump(min);		}		public function next():void {			page++;		}		public function prev():void {			page--;		}		public function jump(n:int):void {			page = n;		}		private function update():void {			_history.unshift(_page);			if (_history.length > historyMax) {				_history.pop();			}			if (_pPage !== _page) {				dispatchEvent(new Event(CHANGE));			} else {				dispatchEvent(new Event(RELOAD));			}		}		private function validate(n:int):int {			var isMax:Boolean = Boolean(max < n);			var isMin:Boolean = Boolean(n < min);			var result:int = n;			if (isMax) {				result = isLoop ? min : max;			}			if (isMin) {				result = isLoop ? max : min;			}			if (isMax) {				dispatchEvent(new Event(MAX_LIMIT));			}			if (isMin) {				dispatchEvent(new Event(MIN_LIMIT));			}			return result;		}	}}