package vw.model {	import flash.events.*;	/**	 * @author Takashi Murai (vesperworks)	 */	public class Threshold extends EventDispatcher {		private var _value:Number;		private var _pValue:Number;		private var _min:Number;		private var _max:Number;		private var _isLoop:Boolean;		public static const CHANGE:String = "THRESHOLDER_CHANGE";		public static const UNCHANGE:String = "THRESHOLDER_UNCHANGE";		public static const MIN_LIMIT:String = "THRESHOLDER_MIN_LIMIT";		public static const MAX_LIMIT:String = "THRESHOLDER_MAX_LIMIT";		public static const INCREASE:String = "THRESHOLDER_INCREASE";		public static const DECREASE:String = "THRESHOLDER_DECREASE";
		public function get isLoop():Boolean {			return _isLoop;		}		public function set isLoop(v:Boolean):void {			_isLoop = v;		}		public function get max():Number {			return _max;		}		public function set max(v:Number):void {			_max = v;			value = value;		}		public function get min():Number {			return _min;		}		public function set min(v:Number):void {			_min = v;			value = value;		}		public function get ratio():Number {			return (value - min) / (max - min);		}		public function set ratio(n:Number):void {			var range:Number = (max - min);			value = min + (range * n);		}		public function get percent():int {			return ((value - min) / (max - min) * 100) >> 0;		}		public function set percent(n:int):void {			var range:Number = (max - min);			value = min + (range * Number(n / 100));		}		public function get value():Number {			return _value;		}		public function set value(v:Number):void {			_pValue = _value;			_value = validate(v);			update();			if (_pValue < _value) {				dispatchEvent(new Event(INCREASE));			}			if (_value < _pValue) {				dispatchEvent(new Event(DECREASE));			}		}		public function Threshold(nMin:Number = 0, nMax:Number = 1) {			min = nMin;			max = nMax;			_value = min;			isLoop = false;		}		public function init():void {			if (min == max) {				dispatchEvent(new Event(MIN_LIMIT));				dispatchEvent(new Event(MAX_LIMIT));			}			equale(min);		}		public function increment():void {			value++;		}		public function decrement():void {			value--;		}		public function equale(n:Number):void {			value = n;		}		private function update():void {			if (_pValue !== _value) {				dispatchEvent(new Event(CHANGE));			} else {				dispatchEvent(new Event(UNCHANGE));			}		}		private function validate(n:Number):Number {			var isMax:Boolean = Boolean(max <= n);			var isMin:Boolean = Boolean(n <= min);			var result:Number = n;			if (isMax) {				result = isLoop ? min : max;			}			if (isMin) {				result = isLoop ? max : min;			}			if (isMax) {				dispatchEvent(new Event(MAX_LIMIT));			}			if (isMin) {				dispatchEvent(new Event(MIN_LIMIT));			}			return result;		}	}}